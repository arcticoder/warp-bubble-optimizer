{"task":"Instantiate MetricBackreactionEvolution with default parameters","priority":"High","source_file":"evolve_3plus1D_with_backreaction.py","source_file_lines":"1:20","source_snippet":"class MetricBackreactionEvolution","python_snippet":"from evolve_3plus1D_with_backreaction import MetricBackreactionEvolution; mbe = MetricBackreactionEvolution(); assert hasattr(mbe, 'laplacian_3d') and callable(mbe.laplacian_3d)"}
{"task":"Validate laplacian_3d finite-difference implementation","priority":"Medium","source_file":"evolve_3plus1D_with_backreaction.py","source_file_lines":"40:70","source_snippet":"def laplacian_3d(self, field):","python_snippet":"import numpy as np; from evolve_3plus1D_with_backreaction import MetricBackreactionEvolution; mbe = MetricBackreactionEvolution(grid_size=(10,10,10)); f = np.ones((10,10,10)); lap = mbe.laplacian_3d(f); assert np.allclose(lap, 0)"}
{"task":"Check stress_energy_tensor returns expected keys and shapes","priority":"High","source_file":"evolve_3plus1D_with_backreaction.py","source_file_lines":"140:170","source_snippet":"def stress_energy_tensor(self, phi, pi):","python_snippet":"import numpy as np; from evolve_3plus1D_with_backreaction import MetricBackreactionEvolution; mbe = MetricBackreactionEvolution(grid_size=(8,8,8)); phi = np.zeros((8,8,8)); pi = np.zeros_like(phi); T = mbe.stress_energy_tensor(phi, pi); assert all(k in T for k in ['T_00','T_11','T_22','T_33']); assert T['T_00'].shape == (8,8,8)"}
# V&V tasks for compute_negative_energy_region
{"task":"Validate compute_negative_energy_region returns expected dictionary keys","source_file":"src/warp_qft/negative_energy.py","source_file_lines":"300:330","source_snippet":"def compute_negative_energy_region","python_snippet":"from warp_qft.negative_energy import compute_negative_energy_region\nres = compute_negative_energy_region(16,0.5)\nassert isinstance(res,dict)\nfor key in ['total_negative_energy','peak_location','region_mask']: assert key in res"}
{"task":"Integration test for compute_negative_energy_region with classical case returns zero negative energy","source_file":"src/warp_qft/negative_energy.py","source_file_lines":"300:330","source_snippet":"def compute_negative_energy_region","python_snippet":"import numpy as np\nfrom warp_qft.negative_energy import compute_negative_energy_region\nres = compute_negative_energy_region(4,0.0)\nassert np.isclose(res.get('total_negative_energy',0),0.0)"}
{"category":"V&V","task":"Validate temporal smearing energy model against analytic triangle/linear ramps","priority":"High","source_file":"src/supraluminal_prototype/power.py","source_file_lines":"1:120","source_snippet":"def compute_smearing_energy(P_peak, t_ramp, t_cruise, shape='linear')","python_snippet":"from supraluminal_prototype.power import compute_smearing_energy\nE30 = compute_smearing_energy(25e6, 30.0, 2.56)\nE120 = compute_smearing_energy(25e6, 120.0, 2.56)\nassert E30 < E120"}
{"category":"V&V","task":"Check Natário zero-expansion condition for build_metric output","priority":"High","source_file":"src/supraluminal_prototype/warp_generator.py","source_file_lines":"1:160","source_snippet":"def build_metric(params):","python_snippet":"import numpy as np\nfrom supraluminal_prototype.warp_generator import build_metric, expansion_scalar\nmetric = build_metric({'R':2.5})\ntheta = expansion_scalar(metric)\nassert np.allclose(theta, 0, atol=1e-6)"}
{"category":"V&V","task":"Coil ramp profile linearity and hysteresis test harness","priority":"Medium","source_file":"src/supraluminal_prototype/hardware.py","source_file_lines":"1:120","source_snippet":"class CoilDriver","python_snippet":"from supraluminal_prototype.hardware import CoilDriver\ndrv = CoilDriver(max_current=5e3)\nI = [drv.command(i/30.0) for i in range(31)]\nassert max(abs((I[i]-I[i-1])-(I[1]-I[0])) for i in range(2,31)) < 1e-3"}
{"category":"V&V","task":"Ring synchronization tolerance test (phase jitter budget)","priority":"Medium","source_file":"src/supraluminal_prototype/control.py","source_file_lines":"1:160","source_snippet":"def sync_rings(phases, jitter):","python_snippet":"import numpy as np\nfrom supraluminal_prototype.control import sync_rings\nphases = np.array([0.0, 0.0, 0.0, 0.0])\nok = sync_rings(phases, jitter=1e-6)\nassert ok is True"}
{"category":"V&V","task":"Reproduce prior soliton energy figure within tolerance","priority":"High","source_file":"docs/SOLITON_PROJECT_FINAL_REPORT.md","source_file_lines":"1:200","source_snippet":"Best negative energy achieved","python_snippet":"# Load reproduction script outputs and compare to reported -1.584e31 J within ±5%\nimport json, math\nwith open('results/soliton_reproduction.json') as f: d=json.load(f)\nassert math.isclose(d['best_negative_energy'], -1.584e31, rel_tol=0.05)"}
{"category":"V&V","task":"Power budget numeric reconciliation","priority":"High","source_file":"docs/","source_file_lines":"-","source_snippet":"Temporal smearing section numbers","python_snippet":"# Verify E_total = 2*(0.5*t_ramp*P_peak)+P_peak*t_cruise across scenarios\n# Raise if differs from documented values by >10% to trigger doc update"}