name: Publish Traceability Badge

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/roadmap.ndjson'
      - 'tests/**'
      - 'traceability_check.py'
      - '.github/workflows/traceability.yml'
      - '.github/workflows/traceability-badge.yml'
  workflow_run:
    workflows: [ "Traceability Coverage" ]
    types: [ completed ]

permissions:
  actions: read
  contents: write
  pages: write
  id-token: write

concurrency:
  group: 'pages-traceability-badge'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Compute traceability coverage JSON
        run: |
          python -m pip install -U pip
          # Run checker; do not fail build if roadmap/tests are absent
          python traceability_check.py --json-out traceability_coverage.json || true
          echo "Traceability JSON (if any):"
          test -f traceability_coverage.json && cat traceability_coverage.json || echo '{}' > traceability_coverage.json

      - name: Log environment and disk
        run: |
          echo "Traceability build timestamp: 2025-08-14 19:13 PDT"
          uname -a
          python --version
          df -h

      - name: Generate Shields.io badge JSON
        run: |
          python - << 'PY'
          import json, os
          # Default badge
          badge = {
              "schemaVersion": 1,
              "label": "Traceability",
              "message": "n/a",
              "color": "lightgrey"
          }
          try:
              with open('traceability_coverage.json', 'r') as f:
                  data = json.load(f)
              pct = float(data.get('coverage_percent', 0.0))
              badge['message'] = f"{pct:.1f}%"
              # Simple color scale
              if pct >= 90:
                  badge['color'] = 'brightgreen'
              elif pct >= 75:
                  badge['color'] = 'green'
              elif pct >= 60:
                  badge['color'] = 'yellowgreen'
              elif pct >= 40:
                  badge['color'] = 'orange'
              else:
                  badge['color'] = 'red'
          except Exception as e:
              # Keep defaults on error
              badge['message'] = 'n/a'
              badge['color'] = 'lightgrey'
          os.makedirs('public', exist_ok=True)
          with open('public/traceability_badge.json', 'w') as f:
              json.dump(badge, f)
          print('Badge JSON:')
          print(json.dumps(badge, indent=2))
          PY

      - name: Fetch latest 40 Eridani artifacts (robust)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Fetching 40 Eridani artifacts: 2025-08-14 19:13 PDT"
          for attempt in 1 2 3; do
            echo "Attempt $attempt to list artifacts..."
            curl -sSf -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" > artifacts.json && break || sleep 5
          done
          echo "Selecting freshest non-expired artifact named 40eridani-artifacts..."
          ARTIFACT_ID=$(jq -r '.artifacts | map(select(.name == "40eridani-artifacts" and .expired == false)) | max_by(.created_at).id' artifacts.json)
          echo "Artifact ID: ${ARTIFACT_ID}"
          test -n "${ARTIFACT_ID}" && [ "${ARTIFACT_ID}" != "null" ] || { echo "No valid 40eridani-artifacts found"; exit 1; }
          for attempt in 1 2 3; do
            echo "Attempt $attempt to download artifact ${ARTIFACT_ID}..."
            curl -L -sSf -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip" -o 40eridani-artifacts.zip && break || sleep 5
          done
          mkdir -p artifacts
          unzip -o 40eridani-artifacts.zip -d artifacts
          mkdir -p public
          cp artifacts/40eridani_*.png public/ || { echo "No plot PNGs found in artifact"; ls -R artifacts || true; exit 1; }

      - name: Verify Pages artifacts
        run: |
          echo "Verifying Pages artifacts: 2025-08-14 16:15 PDT"
          ls public/40eridani_*.png || { echo "Missing 40eridani plots in public/"; exit 1; }
          echo "Found plots: $(ls public/40eridani_*.png)"
          du -sh public || true

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
