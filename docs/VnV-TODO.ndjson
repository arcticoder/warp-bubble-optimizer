{"category":"V&V","task":"Backreaction analyzer timeout path","priority":"Done","source_file":"src/warp_engine/backreaction.py","source_file_lines":"1:200","source_snippet":"analyze_backreaction_coupling(..., timeout_s)","python_snippet":"from warp_engine.backreaction import analyze_backreaction_coupling as f; assert callable(f)"}
{"category":"V&V","task":"Ultimate B-Spline import and objective smoke","priority":"Done","source_file":"src/optimization/ultimate_bspline_optimizer.py","source_file_lines":"1:420","source_snippet":"objective_function_core","python_snippet":"from ultimate_bspline_optimizer import UltimateBSplineOptimizer as U; U().objective_function(U().initialize_parameters())"}
{"task":"Verify build_metric for NatÃ¡rio metric with 1-meter rings","priority":"High","source_file":"src/supraluminal_prototype/warp_generator.py","source_file_lines":"50:65","source_snippet":"def build_metric(self, params): ...","python_snippet":"import numpy as np\nfrom supraluminal_prototype.warp_generator import WarpFieldGenerator\nxs = np.linspace(-1,1,16)\ngen = WarpFieldGenerator(grid=(xs, xs, xs), dx=xs[1]-xs[0])\nG = gen.build_metric({'r_eff':1e-10,'v':3e8})\nassert G.shape == (4,4,16,16,16)\nr2 = sum(xi**2 for xi in np.meshgrid(xs,xs,xs,indexing='ij'))\nassert np.allclose(G[0,0], np.exp(-r2))"}
{"task":"Test plasma_density and field_propagation for 5-meter bubble","priority":"Medium","source_file":"src/supraluminal_prototype/warp_generator.py","source_file_lines":"70:85","source_snippet":"def plasma_density(self, T): ... def field_propagation(self, F): ...","python_snippet":"import numpy as np\nfrom supraluminal_prototype.warp_generator import WarpFieldGenerator\nxs = np.linspace(-1,1,16)\ngen = WarpFieldGenerator(grid=(xs, xs, xs), dx=xs[1]-xs[0])\nT = gen.build_metric({'r_eff':1e-10,'v':3e8})\nrho = gen.plasma_density(T)\nF = gen.field_propagation(T)\nassert np.allclose(rho, 3e20)\nassert F.shape == (3,16,16,16)"}
{"category":"V&V","task":"Integration test for battery power delivery","priority":"High","source_file":"src/supraluminal_prototype/power_system.py","source_file_lines":"90:100","source_snippet":"def deliver_power(self, P): ...","python_snippet":"import numpy as np\nfrom supraluminal_prototype.power_system import PowerSystem\nP = PowerSystem(capacity=2.56e10)\nP_out = P.deliver_power(2.5e8)\nassert P_out >= 2.5e8\nassert P.capacity_remaining() >= 0"}